#!/bin/sh
#		Author: Aron Podrigal <aron@mongotel.com>
#		Inspired by iptables-persistent debian package
#

### BEGIN INIT INFO
# Provides:          iptables-management
# Required-Start:    mountkernfs $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Start-Before:    $network
# X-Stop-After:      $network
# Short-Description: Maintain iptables rules
# Description:       Generates iptables rules from /etc/iptables/*
#   directories and saves the generated rules in 
#   /etc/iptables/ipv{4,6}/rules and loads it to iptables
### END INIT INFO

. /lib/lsb/init-functions

rc=0
BASEDIR=/etc/iptables

# returns true if $2 (CHAIN) exists in DEFAULT_$1 (TABLE)
test_is_default_chain()
{
	default_chains=
	if [ "$1" = "filter" ]; then
		default_chains="INPUT OUTPUT FORWARD"
	elif [ "$1" = "nat" ]; then
		default_chains="PREROUTING POSTROUTING OUTPUT"
	elif [ "$1" = "mangle" ]; then
		default_chains="PREROUTING POSTROUTING INPUT OUTPUT FORWARD"
	fi

	for i in $default_chains; do
		if [ "x$2" = "x$i" ]; then
			return 0
		fi
	done

	return 1
}

e_rule()
{
	echo $1 >> "$DIR/rules"
}

gen_chain_rules()
{
	tbl=$1
	CHAINS=$(find "$DIR/$tbl" -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \;)
	for chain in $CHAINS; do
		rules=$(find "$DIR/$tbl/$chain" -mindepth 2 -maxdepth 2 -type f -name \*.rules | sort)
		if [ ! -z "$rules" ]; then
			e_rule
			e_rule "### table $tbl - CHAIN $chain ###"

			for file in $rules; do
				e_rule
				e_rule "# file $file"
				cat "$file" >> "$DIR/rules"
			done
		fi
	done
}

gen_tables(){
	TABLES=$(find "$DIR" -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \;)

	# load the chains for each table
	for tbl in $TABLES; do
		CHAINS=$(find "$DIR/$tbl" -mindepth 1 -maxdepth 1 -type d -exec basename '{}' \;)
		if [ ! -z "$CHAINS" ]; then
			e_rule "### define table $tbl ###"
			e_rule "*$tbl"
			# get chains
			for chain in $CHAINS; do
				e_rule "# CHAIN $chain"
				if [ -f "$DIR/$tbl/$chain/default.rules" ]; then
					cat "$DIR/$tbl/$chain/default.rules" >> "$DIR/rules"
				elif ! test_is_default_chain "$tbl" "$chain"; then
					e_rule ":$chain - [0:0]"
				fi
			done
			
			e_rule
			# load rules for table chains
			gen_chain_rules "$tbl"
			e_rule
			e_rule "COMMIT"
			e_rule
		fi
	done
}

load_rules()
{
	# load ipv4, and ipv6
	for v in ipv4 ipv6; do
		DIR="$BASEDIR/$v"
		log_action_msg "Generating iptables $v rules"
		if [ -f "$DIR/rules" ]; then
			logger "Saving backup of $DIR/rules to $DIR/.rules"
		       	mv "$DIR/rules" "$DIR/.rules"
		fi
		touch "$DIR/rules" && chmod 0644 "$DIR/rules"
		if [ $? -ne 0 ]; then
			log_failure_msg "Could not touch $DIR/rules"
			rc=1
		else	
			gen_tables
			# load into iptables
			log_action_begin_msg "Loading iptables $v rules"
			if [ "$v" = "ipv4" ]; then
				log_action_cont_msg " IPv4"
				iptables-restore < "$DIR/rules" 2> /dev/null
			else
				ip6tables-restore < "$DIR/rules" 2> /dev/null
			fi
			if [ $? -ne 0 ]; then
				rc=1
			fi
			log_action_end_msg $rc
		fi
	done
}

save_rules()
{
	log_action_begin_msg "Saving rules"

	#save IPv4 rules
	#need at least iptable_filter loaded:
	/sbin/modprobe -q iptable_filter
	if [ ! -f /proc/net/ip_tables_names ]; then
		log_action_cont_msg " skipping IPv4 (no modules loaded)"
	elif [ -x /sbin/iptables-save ]; then
		log_action_cont_msg " IPv4"
		iptables-save > $BASEDIR/ipv4/rules
		if [ $? -ne 0 ]; then
			rc=1
		fi
	fi

	#save IPv6 rules
	#need at least ip6table_filter loaded:
	/sbin/modprobe -q ip6table_filter
	if [ ! -f /proc/net/ip6_tables_names ]; then
		log_action_cont_msg " skipping IPv6 (no modules loaded)"
	elif [ -x /sbin/ip6tables-save ]; then
		log_action_cont_msg " IPv6"
		ip6tables-save > $BASEDIR/ipv6/rules
		if [ $? -ne 0 ]; then
			rc=1
		fi
	fi

	log_action_end_msg $rc
}

flush_rules()
{
	log_action_begin_msg "Flushing rules"

	if [ ! -f /proc/net/ip_tables_names ]; then
		log_action_cont_msg " skipping IPv4 (no module loaded)"
	elif [ -x /sbin/iptables ]; then
		log_action_cont_msg " IPv4"
		for param in F Z X; do /sbin/iptables -$param; done
		for table in $(cat /proc/net/ip_tables_names)
		do
			/sbin/iptables -t $table -F
			/sbin/iptables -t $table -Z
			/sbin/iptables -t $table -X
		done
		for chain in INPUT FORWARD OUTPUT
		do
			/sbin/iptables -P $chain ACCEPT
		done
	fi
	
	if [ ! -f /proc/net/ip6_tables_names ]; then
		log_action_cont_msg " skipping IPv6 (no module loaded)"
	elif [ -x /sbin/ip6tables ]; then
		log_action_cont_msg " IPv6"
		for param in F Z X; do /sbin/ip6tables -$param; done
		for table in $(cat /proc/net/ip6_tables_names)
		do
			/sbin/ip6tables -t $table -F
			/sbin/ip6tables -t $table -Z
			/sbin/ip6tables -t $table -X
		done
		for chain in INPUT FORWARD OUTPUT
		do
			/sbin/ip6tables -P $chain ACCEPT
		done
	fi

	log_action_end_msg 0
}

case "$1" in
start|restart|reload|force-reload)
	load_rules
	;;
save)
	save_rules
	;;
stop)
	# Why? because if stop is used, the firewall gets flushed for a variable
	# amount of time during package upgrades, leaving the machine vulnerable
	# It's also not always desirable to flush during purge
	echo "Automatic flushing disabled, use \"flush\" instead of \"stop\""
	;;
flush)
	flush_rules
	;;
*)
    echo "Usage: $0 {start|restart|reload|force-reload|save|flush}" >&2
    exit 1
    ;;
esac

exit $rc


